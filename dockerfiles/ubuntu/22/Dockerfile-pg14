FROM ubuntu22-init

# PostgreSQL 설치
RUN apt install -y postgresql-14 postgresql-contrib-14 postgresql-plpython3-14 postgresql-plperl-14 postgresql-server-dev-14
RUN apt install -y postgresql-14-pg-hint-plan
RUN apt install -y postgresql-14-show-plans
RUN ( git clone --depth 1 --branch 1.6.1 https://github.com/ossc-db/pg_store_plans.git && cd pg_store_plans && USE_PGXS=1 PATH=/usr/lib/postgresql/14/bin:${PATH} make install && cd .. && rm -rf pg_store_plans )
RUN ( git clone --depth 1 --branch v1.1.0 https://github.com/pgsentinel/pgsentinel.git && cd pgsentinel/src && PATH=/usr/lib/postgresql/14/bin:${PATH} make install && cd ../.. && rm -rf pgsentinel )
RUN ( git clone --depth 1 --branch 1.0.0 https://github.com/experdb/pg_ensure_queryid.git && cd pg_ensure_queryid && PATH=/usr/postgresql/14/bin:${PATH} make install && cd ../.. && rm -rf pg_ensure_queryid )

# PostgreSQL 데이터베이스 초기화
RUN echo '# Docker connections:\nhost    all             all             172.0.0.0/8             scram-sha-256\nhost    replication     all             172.0.0.0/8             scram-sha-256' >> /etc/postgresql/14/main/pg_hba.conf
COPY --chown=postgres:postgres --chmod=600 files/postgresql.auto.conf /var/lib/postgresql/14/main/postgresql.auto.conf
COPY --chown=root:root --chmod=644 files/role.sql files/extension.sql /
RUN su -l postgres -c "/usr/lib/postgresql/14/bin/postgres --single -D /var/lib/postgresql/14/main -c config_file=/etc/postgresql/14/main/postgresql.conf" < /role.sql && rm -f /role.sql
RUN su -l postgres -c "/usr/lib/postgresql/14/bin/postgres --single -D /var/lib/postgresql/14/main -c config_file=/etc/postgresql/14/main/postgresql.conf experdb" < /extension.sql && rm -f /extension.sql
RUN systemctl enable postgresql

# 사용자 환경 설정
RUN echo 'postgres	ALL=(ALL)	NOPASSWD: ALL' > /etc/sudoers.d/postgres
RUN chmod 440 /etc/sudoers.d/postgres
COPY --chown=postgres:postgres --chmod=644 ubuntu/files/pg14_profile /var/lib/postgresql/.bash_profile
RUN echo "LANG=ko_KR.UTF-8\nLANGUAGE=ko:en\nLC_ALL=ko_KR.UTF-8\n\nalias remove='rm -f .*~ *~'" >> /var/lib/postgresql/.bashrc
ADD files/ssh.tar.gz /var/lib/postgresql/.ssh
RUN touch /var/lib/postgresql/.hushlogin && chown -R postgres:postgres /var/lib/postgresql/.hushlogin /var/lib/postgresql/.bashrc /var/lib/postgresql/.ssh && chmod 600 /var/lib/postgresql/.hushlogin /var/lib/postgresql/.bashrc && chmod 700 /var/lib/postgresql/.ssh
RUN echo '\nPATH=/usr/lib/postgresql/14/bin:${PATH}' >> /root/.bashrc
COPY --chown=postgres:postgres --chmod=755 files/initialize.sh /var/lib/postgresql
RUN su -l postgres -c "echo '@reboot /var/lib/postgresql/initialize.sh >/tmp/initialize.log 2>&1' | crontab"

# Docker 환경 설정
ENV PATH=/usr/lib/postgresql/14/bin:${PATH}
ENV PGDATA=/var/lib/postgresql/14/main PGHOST=localhost PGUSER=experdba PGPASSWORD=experdba PGDATABASE=experdb

# Workspace 설정
ENV GIT_CONFIG_GLOBAL=/var/lib/postgresql/workspace/.gitconfig
RUN echo '\nexport GIT_CONFIG_GLOBAL=/var/lib/postgresql/workspace/.gitconfig' >> /var/lib/postgresql/.bashrc
RUN echo "\nalias git-pull='"'for dir in `ls -d ~/workspace/*/.git`; do dir="`dirname $dir`"; ( cd "$dir"; git fetch origin; git fetch upstream; git pull ); done'"'" >> /var/lib/postgresql/.bashrc
RUN echo "alias pg-configure='( cd ~/workspace/postgres; pg_config --configure | sed -e s/runstatedir/with-rundir/g | sed -e s/-O2/-O0/g | xargs ./configure )'" >> /var/lib/postgresql/.bashrc
RUN echo '\nfunction rsync-workspace {\n    hostprefix="`hostname|cut -d - -f 1-2`"\n    hostsuffix="`hostname|cut -d - -f 3`"\n    if [ "$#" -eq 0 ]; then\n        case "$hostsuffix" in\n            active)\n                hostsuffix="standalone"\n                ;;\n            standby)\n                hostsuffix="standalone"\n                ;;\n            standalone)\n                hostsuffix="active"\n                ;;\n            *)\n                hostsuffix="unknown"\n                ;;\n        esac\n    else\n        hostsuffix="$1"\n    fi\n    echo "Synchronizing workspace from ${hostprefix}-${hostsuffix}:${HOME}/workspace to ${HOME}"\n    rsync -avh8 --delete "${hostprefix}-${hostsuffix}:${HOME}/workspace" "${HOME}"\n    return 0\n}' >> /var/lib/postgresql/.bashrc
RUN mkdir /var/lib/postgresql/workspace && mkdir /var/lib/postgresql/workspace/postgres && mkdir /var/lib/postgresql/workspace/pg_store_plans && mkdir /var/lib/postgresql/workspace/pgsentinel
COPY --chown=postgres:postgres --chmod=644 ubuntu/files/gitconfig /var/lib/postgresql/workspace/.gitconfig
RUN ( cd /var/lib/postgresql/workspace/postgres && git init && git remote add origin https://github.com/assam258-5892/postgres.git && git remote add upstream https://github.com/postgres/postgres.git )
RUN ( cd /var/lib/postgresql/workspace/pg_store_plans && git init && git remote add origin https://github.com/experdb/pg_store_plans.git && git remote add upstream https://github.com/ossc-db/pg_store_plans.git )
RUN ( cd /var/lib/postgresql/workspace/pgsentinel && git init && git remote add origin https://github.com/experdb/pgsentinel.git && git remote add upstream https://github.com/pgsentinel/pgsentinel.git )
RUN chown -R postgres:postgres /var/lib/postgresql/workspace
VOLUME /var/lib/postgresql/workspace
