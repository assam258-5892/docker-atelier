FROM ubuntu:22.04

# 리파지토리 초기화
ARG ATELIER_SQUID_PORT DEBIAN_FRONTEND=noninteractive
ENV http_proxy=http://host.docker.internal:${ATELIER_SQUID_PORT}
RUN echo "Acquire::http::Proxy \"http://host.docker.internal:${ATELIER_SQUID_PORT}\";" > /etc/apt/apt.conf.d/90curtin-aptproxy && echo "Acquire::https::Proxy \"http://host.docker.internal:${ATELIER_SQUID_PORT}\";" >> /etc/apt/apt.conf.d/90curtin-aptproxy
RUN apt update -y

# OS 환경 설정
ENV LANG=en_US.UTF-8 LANGUAGE=en LC_ALL=en_US.UTF-8 TZ=Asia/Seoul
RUN apt install -y locales tzdata curl wget bzip2 gnupg && locale-gen en_US.UTF-8 && locale-gen ko_KR.UTF-8 && locale-gen ko_KR.EUC-KR && update-locale && echo 'LANG="C.UTF-8"' > /etc/locale.conf && echo "Etc/UTC" > /etc/timezone
ENV LANG=ko_KR.UTF-8 LANGUAGE=ko:en LC_ALL=ko_KR.UTF-8

# OS 패키지 설치
RUN echo 'deb http://apt.postgresql.org/pub/repos/apt jammy-pgdg main' > /etc/apt/sources.list.d/pgdg.list
RUN curl -fsSL http://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg
RUN curl -fsSL https://deb.nodesource.com/setup_22.x -o /tmp/nodesource.sh && bash /tmp/nodesource.sh && rm /tmp/nodesource.sh
RUN apt update -y
RUN apt install -y kmod init systemd cron openssh-server openssh-client rsync sudo findutils iproute2 iputils-ping net-tools htop ncdu plocate vim pandoc
RUN apt install -y gcc g++ gdb git make cmake valgrind lcov
RUN ( curl -fsSL http://www.jedsoft.org/releases/slang/slang-2.3.3.tar.bz2 | tar xj && cd slang-2.3.3 && ./configure && make && make install && cd .. && rm -rf slang-2.3.3 )
RUN ( curl -fsSL http://www.jedsoft.org/releases/jed/jed-0.99-19.tar.gz | tar xz && cd jed-0.99-19 && if [ "`/bin/arch`" = "aarch64" ]; then ./configure --build=aarch64-unknown-linux-gnu; else ./configure; fi && make && make install && cd .. && rm -rf jed-0.99-19 )
RUN update-alternatives --install /usr/bin/editor editor /usr/local/bin/jed 100
RUN apt install -y python3 python3-dev python3-pip python3-psutil && apt install -y bpytop && pip3 install powerline-status
RUN apt install -y nodejs && npm install -g npm && npm install -g @anthropic-ai/claude-code

# PostgreSQL 개발 환경 설정
RUN apt-get install -y pkg-config flex bison clang clang-format ccache fop gettext libxml2-utils xsltproc docbook-xml docbook-xsl libipc-run-perl libtext-trim-perl
RUN apt-get install -y libcairo2-dev libkrb5-dev libkrb5-dev libldap-dev liblz4-dev libpam-dev libperl-dev libreadline-dev libssl-dev libsystemd-dev libxml2-dev libxslt1-dev libzstd-dev python3-dev systemtap-sdt-dev tcl-dev zlib1g-dev

# CloudBerry 개발 환경 설정
RUN apt-get install -y golang libapr1-dev libevent-dev libcurl4-openssl-dev libbz2-dev libprotobuf-dev protobuf-compiler libuv1-dev libyaml-dev
RUN ( git clone --depth 1 --branch v3.3.0 https://github.com/apache/xerces-c.git && cd xerces-c && cmake -B build && cmake --build build && cmake --install build && cd .. && rm -rf xerces-c && echo "/usr/local/lib64" > /etc/ld.so.conf.d/local-xerces.conf && ldconfig )

# 사용자 환경 설정
RUN mkdir -p /etc/sysctl.d && echo 'fs.inotify.max_user_instances=4096' > /etc/sysctl.d/99-inotify.conf
RUN mkdir -p /etc/sysctl.d && echo 'kernel.core_pattern=/tmp/core-%e-%t-%p' > /etc/sysctl.d/99-core-pattern.conf
RUN mkdir -p /etc/ssh/sshd_config.d && echo "GatewayPorts yes" > /etc/ssh/sshd_config.d/02-gatewayport.conf && echo "AcceptEnv TERM_PROGRAM" > /etc/ssh/sshd_config.d/10-acceptenv.conf
RUN echo "\nalias rm='rm -i'\nalias cp='cp -i'\nalias mv='mv -i'" >> /root/.bashrc
RUN echo "\nLANG=ko_KR.UTF-8\nLANGUAGE=ko:en\nLC_ALL=ko_KR.UTF-8\nTZ=Asia/Seoul\n\nalias remove='rm -f .*~ *~'\n\nulimit -n 1048576\nulimit -c unlimited" >> /root/.bashrc
ADD --chown=root:root files/ssh.tar.gz /root/.ssh
RUN touch /root/.hushlogin

# Docker 환경 설정
ENTRYPOINT ["/usr/sbin/init"]
