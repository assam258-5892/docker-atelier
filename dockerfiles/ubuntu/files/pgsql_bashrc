LANG=ko_KR.UTF-8
LANGUAGE=ko:en
LC_ALL=ko_KR.UTF-8

USER=`whoami`
case "${USER}" in
    root)
        PS1="r@"
        ;;
    postgres)
        PS1="p@"
        ;;
    *)
        PS1="${USER}@"
        ;;
esac
case "`hostname`" in
    rocky8-*)
        PS1="${PS1}r08-"
        ;;
    rocky9-*)
        PS1="${PS1}r09-"
        ;;
    ubuntu22-*)
        PS1="${PS1}u22-"
        ;;
    ubuntu24-*)
        PS1="${PS1}u24-"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 1`-"
        ;;
esac
case "`hostname`" in
    *-pg14-*)
        PS1="${PS1}p14-"
        ;;
    *-pg15-*)
        PS1="${PS1}p15-"
        ;;
    *-pg16-*)
        PS1="${PS1}p16-"
        ;;
    *-pg17-*)
        PS1="${PS1}p17-"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 2`-"
        ;;
esac
case "`hostname`" in
    *-active)
        PS1="${PS1}a"
        ;;
    *-standby)
        PS1="${PS1}s"
        ;;
    *-standalone)
        PS1="${PS1}#"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 3`"
        ;;
esac
PS1="${PS1}:\w\$ "
PS2='> '
PS3='+ '
export USER PS1 PS2 PS3

ulimit -n 1048576

alias remove='rm -f .*~ *~'

export GIT_CONFIG_GLOBAL=/var/lib/postgresql/workspace/.gitconfig

function git-pull {
    for dir in `ls -d ~/workspace/*/.git`; do
        (
            dir="`dirname $dir`" 
            echo "Pulling updates in $dir"
            cd "$dir"
            for remote in `git remote`; do
                echo "Fetching from remote: $remote"
                git fetch "${remote}" --tags --prune
                if [ $? -ne 0 ]; then
                    echo "Failed to fetch from remote $remote. Please check the output for errors."
                    continue
                fi
            done
            if [ "`git branch|grep \ main$|wc -l`" -eq 0 -a "`git branch -r|grep \ origin/main$|wc -l`" -gt 0 ]; then
                echo "Creating and checking out main branch from origin/main"
                git branch main origin/main
                git checkout main
            fi
            if [ "`git branch|grep \ master$|wc -l`" -eq 0 -a "`git branch -r|grep \ origin/master$|wc -l`" -gt 0 ]; then
                echo "Creating and checking out master branch from origin/master"
                git branch master origin/master
                git checkout master
            fi
            echo "Pulling latest changes"
            git pull
        )
    done
}

function git-clean {
    for dir in `ls -d ~/workspace/*/.git`; do
        (
            dir="`dirname $dir`" 
            echo "Cleaning untracked files in $dir"
            cd "$dir"
            sudo git clean -xdf
            if [ $? -ne 0 ]; then
                echo "Failed to clean untracked files in $dir. Please check the output for errors."
            else
                echo "Successfully cleaned untracked files in $dir."
            fi
        )
    done
}

function rsync-workspace {
    (
        hostprefix="`hostname|cut -d - -f 1-2`"
        hostsuffix="`hostname|cut -d - -f 3`"
        if [ "$#" -eq 0 ]; then
            case "$hostsuffix" in
                active)
                    hostsuffix="standalone"
                    ;;
                standby)
                    hostsuffix="standalone"
                    ;;
                standalone)
                    hostsuffix="active"
                    ;;
                *)
                    hostsuffix="unknown"
                    ;;
            esac
        else
            hostsuffix="$1"
        fi
        echo "Synchronizing workspace from ${hostprefix}-${hostsuffix}:${HOME}/workspace to ${HOME}"
        rsync -avh8 --delete "${hostprefix}-${hostsuffix}:${HOME}/workspace/*" "${HOME}/workspace"
        if [ $? -ne 0 ]; then
            echo "Failed to synchronize workspace. Please check the output for errors."
            return 1
        fi
        echo "Workspace synchronized successfully."
    )
}

function pg-configure {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Configuring PostgreSQL with custom settings..."
        pg_config --configure | sed -e s/runstatedir/with-rundir/g | xargs ./configure $@
        if [ $? -ne 0 ]; then
            echo "Configuration failed. Please check the output for errors."
            return 1
        fi
        echo "Configuration completed successfully."
    )
}

function pg-debug {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Configuring PostgreSQL with custom settings..."
        pg_config --configure | sed -e s/runstatedir/with-rundir/g | sed -e s/-O2/-O0/g | sed -e s/\ -Wp,-D_FORTIFY_SOURCE=2//g | sed -e s/\ -D_FORTIFY_SOURCE=2//g | sed -e s/\ -D_FORTIFY_SOURCE=3//g | xargs ./configure $@
        if [ $? -ne 0 ]; then
            echo "Configuration failed. Please check the output for errors."
            return 1
        fi
        echo "Configuration completed successfully."
    )
}

function pg-make {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Building PostgreSQL..."
        make world $@
        if [ $? -ne 0 ]; then
            echo "Make failed. Please check the output for errors."
            return 1
        fi
        echo "Make completed successfully."
    )
}

function pg-clean {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Cleaning PostgreSQL build files..."
        make clean
        if [ $? -ne 0 ]; then
            echo "Clean failed. Please check the output for errors."
            return 1
        fi
        echo "Clean completed successfully."
    )
}

function pg-check {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Running checks on PostgreSQL..."
        make check-world
        if [ $? -ne 0 ]; then
            echo "Check failed. Please check the output for errors."
            return 1
        fi
        echo "Check completed successfully."
    )
}

function pg-install {
    (
        if [ ! -d ~/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ~/workspace/postgres
        echo "Installing PostgreSQL..."
        sudo make install-world
        if [ $? -ne 0 ]; then
            echo "Install failed. Please check the output for errors."
            return 1
        fi
        echo "PostgreSQL installation completed successfully."
        if [ -d ~/workspace/pg_ensure_queryid ]; then
            cd ~/workspace/pg_ensure_queryid
            echo "Installing pg_ensure_queryid..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pg_ensure_queryid installation failed. Please check the output for errors."
                return 1
            fi
            echo "pg_ensure_queryid installation completed successfully."
        fi
        if [ -d ~/workspace/pg_store_plans ]; then
            cd ~/workspace/pg_store_plans
            echo "Installing pg_store_plans..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pg_store_plans installation failed. Please check the output for errors."
                return 1
            fi
            echo "pg_store_plans installation completed successfully."
        fi
        if [ -d ~/workspace/pgsentinel ]; then
            cd ~/workspace/pgsentinel/src
            echo "Installing pgsentinel..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pgsentinel installation failed. Please check the output for errors."
                return 1
            fi
            echo "pgsentinel installation completed successfully."
        fi
        echo "Setting ownership of PostgreSQL files to postgres user..."
        sudo chown -R postgres:postgres ~/workspace
        if [ $? -ne 0 ]; then
            echo "Failed to set ownership. Please check the output for errors."
            return 1
        fi
        echo "Ownership set successfully."
    )
}

function pg-start {
    echo "Starting PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Starting PostgreSQL service..."
            sudo systemctl start postgresql
            ;;
        rhel|rocky)
            echo "Starting PostgreSQL service..."
            sudo systemctl start postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot start PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server started successfully."
}

function pg-restart {
    echo "Restarting PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Restarting PostgreSQL service..."
            sudo systemctl restart postgresql
            ;;
        rhel|rocky)
            echo "Restarting PostgreSQL service..."
            sudo systemctl restart postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot restart PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server restarted successfully."
}

function pg-stop {
    echo "Stopping PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Stopping PostgreSQL service..."
            sudo systemctl stop postgresql
            ;;
        rhel|rocky)
            echo "Stopping PostgreSQL service..."
            sudo systemctl stop postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot stop PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server stopped successfully."
}

function pg-status {
    echo "Checking PostgreSQL server status..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Checking PostgreSQL service status..."
            sudo systemctl status postgresql
            ;;
        rhel|rocky)
            echo "Checking PostgreSQL service status..."
            sudo systemctl status postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot check PostgreSQL service status."
            return 1
            ;;
    esac
    echo "PostgreSQL server status checked successfully."
}
