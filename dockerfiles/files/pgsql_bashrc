LANG=ko_KR.UTF-8
LANGUAGE=ko:en
LC_ALL=ko_KR.UTF-8
TZ=Asia/Seoul

if [[ $- != *i* ]]; then return; fi

USER=`whoami`
case "${USER}" in
    root)
        PS1="r@"
        ;;
    postgres)
        PS1="p@"
        ;;
    *)
        PS1="${USER}@"
        ;;
esac
case "`hostname`" in
    rocky8-*)
        PS1="${PS1}r08-"
        ;;
    rocky9-*)
        PS1="${PS1}r09-"
        ;;
    ubuntu22-*)
        PS1="${PS1}u22-"
        ;;
    ubuntu24-*)
        PS1="${PS1}u24-"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 1`-"
        ;;
esac
case "`hostname`" in
    *-pg14-*)
        PS1="${PS1}p14-"
        ;;
    *-pg15-*)
        PS1="${PS1}p15-"
        ;;
    *-pg16-*)
        PS1="${PS1}p16-"
        ;;
    *-pg17-*)
        PS1="${PS1}p17-"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 2`-"
        ;;
esac
case "`hostname`" in
    *-active)
        PS1="${PS1}a"
        ;;
    *-standby)
        PS1="${PS1}s"
        ;;
    *-standalone)
        PS1="${PS1}#"
        ;;
    *)
        PS1="${PS1}`hostname|cut -d - -f 3`"
        ;;
esac
PS1="${PS1}:\w\$ "
PS2='> '
PS3='+ '
export USER PS1 PS2 PS3

export POWERLINE_CONFIG_PATHS="${HOME}/.config/powerline"
alias powerline="if [ -f `which powerline-daemon` ]; then powerline-daemon -q; POWERLINE_BASH_CONTINUATION=1 POWERLINE_BASH_SELECT=1 . $(pip3 show powerline-status | grep Location | awk '{print $2}')/powerline/bindings/bash/powerline.sh; fi"
if [ "$TERM_PROGRAM" = "Termius" ] || [ "$TERM_PROGRAM" = "vscode" ] || [ "$TERM_PROGRAM" = "tmux" ]; then powerline; fi

ulimit -n 1048576
ulimit -c unlimited

[ -f "${HOME}/.git-completion.bash" ] && source "${HOME}/.git-completion.bash"

alias remove='rm -f .*~ *~'

export GIT_CONFIG_GLOBAL="${HOME}/workspace/.gitconfig"

function git-pull {
    for dir in `ls -d ${HOME}/workspace/*/.git`; do
        (
            dir="`dirname $dir`"
            echo "Pulling updates in $dir"
            cd "$dir"
            echo "Fetching from all remotes..."
            git fetch --all --tags --prune
            if [ $? -ne 0 ]; then
                echo "Failed to fetch from all remotes. Please check the output for errors."
            fi
            git submodule update --init --recursive --remote
            if [ $? -ne 0 ]; then
                echo "Failed to update submodules. Please check the output for errors."
            fi
            if [ "`git branch|grep \ main$|wc -l`" -eq 0 -a "`git branch -r|grep \ origin/main$|wc -l`" -gt 0 ]; then
                echo "Creating and checking out main branch from origin/main"
                git branch main origin/main
                git checkout main
            fi
            if [ "`git branch|grep \ master$|wc -l`" -eq 0 -a "`git branch -r|grep \ origin/master$|wc -l`" -gt 0 ]; then
                echo "Creating and checking out master branch from origin/master"
                git branch master origin/master
                git checkout master
            fi
            echo "Pulling latest changes"
            git pull
        )
    done
}

function git-update {
    for dir in `ls -d ${HOME}/workspace/*/.git`; do
        (
            dir="`dirname $dir`"
            echo "Updating submodules in $dir"
            cd "$dir"
            git submodule update --init --recursive --remote
            if [ $? -ne 0 ]; then
                echo "Failed to update submodules in $dir. Please check the output for errors."
            fi
        )
    done
}

function git-clean {
    for dir in `ls -d ${HOME}/workspace/*/.git`; do
        (
            dir="`dirname $dir`"
            echo "Changing ownership to postgres in $dir"
            sudo chown -R postgres:postgres "$dir"
            echo "Cleaning untracked files in $dir"
            cd "$dir"
            sudo git clean -xdf
            if [ $? -ne 0 ]; then
                echo "Failed to clean untracked files in $dir. Please check the output for errors."
            else
                echo "Successfully cleaned untracked files in $dir."
            fi
            sudo git submodule foreach --recursive 'git clean -xdf'
            if [ $? -ne 0 ]; then
                echo "Failed to clean untracked files in submodules of $dir. Please check the output for errors."
            else
                echo "Successfully cleaned untracked files in submodules of $dir."
            fi
        )
    done
}

function rsync-workspace {
    (
        source="`hostname|cut -d - -f 3`"
        if [ "$#" -eq 0 ]; then
            case "$source" in
                active)
                    source="standalone"
                    ;;
                standby)
                    source="standalone"
                    ;;
                standalone)
                    source="active"
                    ;;
                *)
                    source="unknown"
                    ;;
            esac
        else
            source="$1"
        fi
        echo "Synchronizing workspace from ${source}:${HOME}/workspace to ${HOME}"
        rsync -avh8 --delete "${source}:${HOME}/workspace/*" "${HOME}/workspace"
        if [ $? -ne 0 ]; then
            echo "Failed to synchronize workspace. Please check the output for errors."
            return 1
        fi
        echo "Workspace synchronized successfully."
    )
}

function pg-configure {
    (
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        echo "Changing ownership to postgres in postgres"
        sudo chown -R postgres:postgres ${HOME}/workspace/postgres
        cd ${HOME}/workspace/postgres
        echo "Cleaning untracked files in postgres"
        git clean -xdf
        echo "Configuring PostgreSQL..."
        MODE="debug"
        case "$1" in
            release|r)
                MODE="release" ;;
            debug|d)
                MODE="debug" ;;
            valgrind|v)
                MODE="valgrind" ;;
            coverage|c)
                MODE="coverage" ;;
            *)
                echo "Usage: pg-configure [release|debug|valgrind|coverage]"
                return 1 ;;
        esac
        echo "Configuring PostgreSQL with custom settings... (mode: $MODE)"
        if [ "$MODE" = "release" ]; then
            eval set -- $(pg_config --configure)
            echo "./configure \\" >/tmp/configure.before; for arg in "$@"; do printf "     '%s' \\\\\n" "$arg"; done >>/tmp/configure.before
            if [ ! -f /tmp/configure.origin ]; then cp /tmp/configure.before /tmp/configure.origin; fi
            new_args=()
            for arg in "$@"; do
                case "$arg" in
                    --runstatedir=*) ;;
                    *) new_args+=("$arg") ;;
                esac
            done
            echo "./configure \\" >/tmp/configure.after; for arg in "${new_args[@]}"; do printf "     '%s' \\\\\n" "$arg"; done >>/tmp/configure.after
            ./configure "${new_args[@]}"
        elif [ "$MODE" = "debug" ] || [ "$MODE" = "valgrind" ] || [ "$MODE" = "coverage" ]; then
            eval set -- $(pg_config --configure)
            echo "./configure \\" >/tmp/configure.before; for arg in "$@"; do printf "     '%s' \\\\\n" "$arg"; done >>/tmp/configure.before
            if [ ! -f /tmp/configure.origin ]; then cp /tmp/configure.before /tmp/configure.origin; fi
            new_args=()
            for arg in "$@"; do
                case "$arg" in
                    --runstatedir=*) ;;
                    CFLAGS=*|CXXFLAGS=*|CPPFLAGS=*)
                        arg="$(echo "$arg" | sed -E 's/-O([0-9szSZ]+)/-O0/g')"
                        arg="$(echo "$arg" | sed -E 's/-Wp,-D_FORTIFY_SOURCE=[0-9]+|-D_FORTIFY_SOURCE=[0-9]+//g')"
                        if [ "$MODE" = "coverage" ]; then
                            arg="$(echo "$arg" | sed -E 's/-flto=auto//g')"
                            arg="$(echo "$arg" | sed -E 's/-ffat-lto-objects//g')"
                        fi
                        if [ "$MODE" = "valgrind" ] && [[ "$arg" != *-DUSE_VALGRIND* ]]; then
                            if [[ "$arg" =~ ^([^=]+)=(.*)$ ]]; then
                                key="${BASH_REMATCH[1]}"
                                value="${BASH_REMATCH[2]}"
                                if [[ "$value" == *-DUSE_VALGRIND* ]]; then
                                    arg="$key=$value"
                                else
                                    arg="$key=$value -DUSE_VALGRIND"
                                fi
                            fi
                        fi
                        new_args+=("$arg"); ;;
                    *) new_args+=("$arg") ;;
                esac
            done
            if [ "$MODE" = "coverage" ]; then
                coverage_found=0
                for a in "${new_args[@]}"; do
                    if [[ "$a" == --enable-coverage* ]]; then
                        coverage_found=1
                        break
                    fi
                done
                if [ $coverage_found -eq 0 ]; then
                    new_args+=("--enable-coverage")
                fi
            fi
            echo "./configure \\" >/tmp/configure.after; for arg in "${new_args[@]}"; do printf "     '%s' \\\\\n" "$arg"; done >>/tmp/configure.after
            ./configure "${new_args[@]}"
        fi
        if [ $? -ne 0 ]; then
            echo "Configuration failed. Please check the output for errors."
            return 1
        fi
        echo "Configuration completed successfully."
    )
}

function pg-make {
    (
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        echo "Changing ownership to postgres in postgres"
        sudo chown -R postgres:postgres ${HOME}/workspace/postgres
        cd ${HOME}/workspace/postgres
        echo "Building PostgreSQL..."
        make world $@
        if [ $? -ne 0 ]; then
            echo "Make failed. Please check the output for errors."
            return 1
        fi
        echo "Make completed successfully."
    )
}

function pg-clean {
    (
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ${HOME}/workspace/postgres
        echo "Cleaning PostgreSQL build files..."
        make clean
        if [ $? -ne 0 ]; then
            echo "Clean failed. Please check the output for errors."
            return 1
        fi
        echo "Clean completed successfully."
    )
}

function pg-check {
    (
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ${HOME}/workspace/postgres
        echo "Running checks on PostgreSQL..."
        make check-world
        if [ $? -ne 0 ]; then
            echo "Check failed. Please check the output for errors."
            return 1
        fi
        echo "Check completed successfully."
    )
}

function pg-install {
    (
        version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
        # if [ -d ${HOME}/workspace/postgres/contrib/pg_inzent_tde/inzent_tde -o $version -eq 16 ]; then
        #     echo "Changing ownership to postgres in inzent_tde"
        #     sudo chown -R postgres:postgres ${HOME}/workspace/postgres/contrib/pg_inzent_tde/inzent_tde
        #     cd ${HOME}/workspace/postgres/contrib/pg_inzent_tde/inzent_tde
        #     echo "Cleaning untracked files in inzent_tde"
        #     sudo git clean -xdf
        #     echo "Installing inzent_tde..."
        #     cd ${HOME}/workspace/postgres/contrib/pg_inzent_tde/inzent_tde/izt_tde
        #     sudo sh -c "PATH=${PATH} USE_PGXS=1 make pass2 install"
        #     if [ $? -ne 0 ]; then
        #         echo "inzent_tde installation failed. Please check the output for errors."
        #         return 1
        #     fi
        #     echo "inzent_tde installation completed successfully."
        # fi
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        echo "Changing ownership to postgres in postgres"
        sudo chown -R postgres:postgres ${HOME}/workspace/postgres
        cd ${HOME}/workspace/postgres
        echo "Installing PostgreSQL..."
        sudo make install-world
        if [ $? -ne 0 ]; then
            echo "Install failed. Please check the output for errors."
            return 1
        fi
        echo "PostgreSQL installation completed successfully."
        if [ -d ${HOME}/workspace/pg_ensure_queryid ]; then
            echo "Changing ownership to postgres in pg_ensure_queryid"
            sudo chown -R postgres:postgres ${HOME}/workspace/pg_ensure_queryid
            cd ${HOME}/workspace/pg_ensure_queryid
            echo "Installing pg_ensure_queryid..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pg_ensure_queryid installation failed. Please check the output for errors."
                return 1
            fi
            echo "pg_ensure_queryid installation completed successfully."
        fi
        if [ -d ${HOME}/workspace/pg_store_plans ]; then
            echo "Changing ownership to postgres in pg_store_plans"
            sudo chown -R postgres:postgres ${HOME}/workspace/pg_store_plans
            cd ${HOME}/workspace/pg_store_plans
            echo "Installing pg_store_plans..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pg_store_plans installation failed. Please check the output for errors."
                return 1
            fi
            echo "pg_store_plans installation completed successfully."
        fi
        if [ -d ${HOME}/workspace/pgsentinel ]; then
            echo "Changing ownership to postgres in pgsentinel"
            sudo chown -R postgres:postgres ${HOME}/workspace/pgsentinel
            cd ${HOME}/workspace/pgsentinel/src
            echo "Installing pgsentinel..."
            sudo git clean -xdf && sudo sh -c "PATH=${PATH} USE_PGXS=1 make install"
            if [ $? -ne 0 ]; then
                echo "pgsentinel installation failed. Please check the output for errors."
                return 1
            fi
            echo "pgsentinel installation completed successfully."
        fi
        echo "Setting ownership of PostgreSQL files to postgres user..."
        sudo chown -R postgres:postgres ${HOME}/workspace
        if [ $? -ne 0 ]; then
            echo "Failed to set ownership. Please check the output for errors."
            return 1
        fi
        echo "Ownership set successfully."
    )
}

function pg-start {
    echo "Starting PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Starting PostgreSQL service..."
            sudo systemctl start postgresql
            ;;
        rhel|rocky)
            echo "Starting PostgreSQL service..."
            sudo systemctl start postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot start PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server started successfully."
}

function pg-restart {
    echo "Restarting PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Restarting PostgreSQL service..."
            sudo systemctl restart postgresql
            ;;
        rhel|rocky)
            echo "Restarting PostgreSQL service..."
            sudo systemctl restart postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot restart PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server restarted successfully."
}

function pg-stop {
    echo "Stopping PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Stopping PostgreSQL service..."
            sudo systemctl stop postgresql
            ;;
        rhel|rocky)
            echo "Stopping PostgreSQL service..."
            sudo systemctl stop postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot stop PostgreSQL service."
            return 1
            ;;
    esac
    echo "PostgreSQL server stopped successfully."
}

function pg-status {
    echo "Checking PostgreSQL server status..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            echo "Checking PostgreSQL service status..."
            sudo systemctl status postgresql
            ;;
        rhel|rocky)
            echo "Checking PostgreSQL service status..."
            sudo systemctl status postgresql-${version}
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot check PostgreSQL service status."
            return 1
            ;;
    esac
    echo "PostgreSQL server status checked successfully."
}

function pg-kill {
    echo "Kill PostgreSQL server..."
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            if [ ! -f  "$HOME/$version/main/postmaster.pid" ]; then
                echo "PostgreSQL pid file not found."
                return 1
            fi
            kill `head -n 1 "$HOME/$version/main/postmaster.pid"`
            ;;
        rhel|rocky)
            if [ ! -f  "$HOME/$version/data/postmaster.pid" ]; then
                echo "PostgreSQL pid file not found."
                return 1
            fi
            kill `head -n 1 "$HOME/$version/data/postmaster.pid"`
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot check PostgreSQL service status."
            return 1
            ;;
    esac
}

function pg-lcov {
    (
        if [ ! -d ${HOME}/workspace/postgres ]; then
            echo "PostgreSQL source directory not found. Please clone the repository first."
            return 1
        fi
        cd ${HOME}/workspace/postgres
        case "$1" in
            clear)
                echo "Clearing coverage counters..."
                lcov --zerocounters --directory .
                if [ $? -ne 0 ]; then
                    echo "Failed to clear coverage counters."
                    return 1
                fi
                echo "Coverage counters cleared."
                ;;
            report)
                echo "Capturing coverage data..."
                lcov --capture --directory . --output-file lcov.gcov
                if [ $? -ne 0 ]; then
                    echo "Failed to capture coverage data."
                    return 1
                fi
                echo "Generating HTML report..."
                genhtml_version=$(genhtml --version 2>&1 | awk '{print $4}')
                if [[ "$genhtml_version" =~ ^([0-9]+)\.([0-9]+) ]]; then
                    if [ "${BASH_REMATCH[1]}" -ge 2 ]; then
                        genhtml lcov.gcov --ignore-errors unmapped --output-directory html.gcov
                    else
                        genhtml lcov.gcov --output-directory html.gcov
                    fi
                else
                    genhtml lcov.gcov --output-directory html.gcov
                fi
                if [ $? -ne 0 ]; then
                    echo "Failed to generate HTML report."
                    return 1
                fi
                echo "HTML report generated: html.gcov/index.html"
                ;;
            *)
                echo "Usage: pg-lcov [clear|report]"
                echo "  clear : Clear coverage counters (lcov --zerocounters)"
                echo "  report : Capture coverage data and generate HTML report"
                ;;
        esac
    )
}

function pg-valgrind {
    echo "Running PostgreSQL with Valgrind..."
    if [ ! -d "$HOME/workspace/valgrind" ]; then
        mkdir -p "$HOME/workspace/valgrind"
    fi
    if [ ! -f "$HOME/.valgrind.supp" ]; then
        touch "$HOME/.valgrind.supp"
    fi
    if [ ! -f "$HOME/workspace/valgrind.supp" ]; then
        touch "$HOME/workspace/valgrind.supp"
    fi
    rm -f $HOME/workspace/valgrind/*.log
    distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
    version=`psql --version | cut -d " " -f 3 | cut -d . -f 1`
    echo "Detected Distro: ${distro}, PostgreSQL Version: ${version}"
    case "${distro}" in
        ubuntu)
            valgrind --leak-check=full --num-callers=100 --gen-suppressions=all --suppressions=$HOME/.valgrind.supp --suppressions=$HOME/workspace/valgrind.supp --time-stamp=yes --log-file=$HOME/workspace/valgrind/%p.log --trace-children=yes postgres -D "${PGDATA}" -c "config_file=/etc/postgresql/${version}/main/postgresql.conf" &
            ;;
        rhel|rocky)
            valgrind --leak-check=full --num-callers=100 --gen-suppressions=all --suppressions=$HOME/.valgrind.supp --suppressions=$HOME/workspace/valgrind.supp --time-stamp=yes --log-file=$HOME/workspace/valgrind/%p.log --trace-children=yes postgres -D "${PGDATA}" &
            ;;
        *)
            echo "Unrecognized distro ${distro}, cannot check PostgreSQL service status."
            return 1
            ;;
    esac
}

function pg-trim-valgrind {
    (
        echo "Trimming Valgrind log files..."
        if [ -d "$HOME/workspace/valgrind" ]; then
            cd "$HOME/workspace/valgrind"
            if [ ! "$(ls *.log)" ]; then
                echo "No log files to trim in directory '$HOME/workspace/valgrind'."
                return 1
            fi
            for filename in `ls *.log`; do
                if [ `grep -v ^== "$filename" | wc -l` -eq 0 ]; then
                    echo "Removing empty log file: $filename"
                    rm "$filename"
                fi
            done
        fi
    )
}

function pg-user {
    if [ "$#" -gt 1 ]; then
        echo "Usage: pg-user experdba|postgres"
        return 1
    fi
    if [ "$#" -eq 1 ]; then
        case "$1" in
            postgres|p)
                distro=`cat /etc/os-release | grep ^ID= | cut -d = -f 2 | tr -d \"`
                if [ "$distro" = "ubuntu" ]; then
                    echo -e "PGHOST=/var/run/postgresql\nunset PGUSER\nunset PGPASSWORD\nunset PGDATABASE\nexport PGHOST" > "${HOME}/workspace/.pguser"
                else
                    echo -e "unset PGHOST\nunset PGUSER\nunset PGPASSWORD\nunset PGDATABASE" > "${HOME}/workspace/.pguser"
                fi
                ;;
            experdba|experdb|exp|ex|e)
                echo -e "PGHOST=localhost\nPGUSER=experdba\nPGPASSWORD=experdba\nPGDATABASE=experdb\nexport PGHOST PGUSER PGPASSWORD PGDATABASE" > "${HOME}/workspace/.pguser"
                ;;
            *)
                echo "Usage: pg-user experdba|postgres"
                return 1
                ;;
        esac
    fi
    [ -f "${HOME}/workspace/.pguser" ] && source "${HOME}/workspace/.pguser"
    if [ "$PGHOST" ]; then
        echo "Host: $PGHOST"
    fi
    if [ "$PGUSER" ]; then
        echo "User: $PGUSER"
    else
        echo "User: postgres"
    fi
    if [ "$PGPASSWORD" ]; then
        echo "Password: $PGPASSWORD"
    fi
    if [ "$PGDATABASE" ]; then
        echo "Database: $PGDATABASE"
    fi
}

export -f git-pull
export -f git-update
export -f git-clean
export -f rsync-workspace
export -f pg-configure
export -f pg-make
export -f pg-clean
export -f pg-check
export -f pg-install
export -f pg-start
export -f pg-restart
export -f pg-stop
export -f pg-status
export -f pg-kill
export -f pg-lcov
export -f pg-valgrind
export -f pg-trim-valgrind
export -f pg-user
