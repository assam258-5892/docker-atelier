FROM rocky8-init

# Docker 플랫폼 아키텍처 자동 감지
ARG TARGETARCH
# PostgreSQL Major Version
ARG PG_MAJOR

# PostgreSQL 설치
RUN dnf install -y postgresql${PG_MAJOR}-server postgresql${PG_MAJOR}-contrib postgresql${PG_MAJOR}-plpython3 postgresql${PG_MAJOR}-plperl postgresql${PG_MAJOR}-devel
RUN dnf install -y pg_hint_plan_${PG_MAJOR}
RUN dnf install -y pg_show_plans_${PG_MAJOR}
RUN git config --global credential.helper store
RUN ( git clone --depth 1 --branch 1.9e1 https://github.com/experdb/pg_store_plans.git && cd pg_store_plans && USE_PGXS=1 PATH=/usr/pgsql-${PG_MAJOR}/bin:${PATH} make install && cd .. && rm -rf pg_store_plans )
RUN ( git clone --depth 1 --branch REL_1_1_0 https://github.com/experdb/pgsentinel.git && cd pgsentinel/src && PATH=/usr/pgsql-${PG_MAJOR}/bin:${PATH} make install && cd ../.. && rm -rf pgsentinel )
RUN ( git clone --depth 1 --branch 1.0.0 https://github.com/experdb/pg_ensure_queryid.git && cd pg_ensure_queryid && PATH=/usr/pgsql-${PG_MAJOR}/bin:${PATH} make install && cd ../.. && rm -rf pg_ensure_queryid )
RUN --mount=type=secret,id=git_credentials cp /run/secrets/git_credentials /root/.git-credentials && \
    if [ "${PG_MAJOR}" = "16" ]; then \
        ( \
            git clone --depth 1 --branch REL_${PG_MAJOR}_0 https://github.com/assam258-5892/pg_inzent_tde.git && \
            cd pg_inzent_tde && \
            git submodule update --init --recursive --remote && \
            ( cd inzent_tde/izt_tde && USE_PGXS=1 PATH=/usr/pgsql-${PG_MAJOR}/bin:${PATH} make pass2 install ) && \
            USE_PGXS=1 PATH=/usr/pgsql-${PG_MAJOR}/bin:${PATH} make install && \
            cd .. && \
            rm -rf pg_inzent_tde \
        ); \
    fi && \
    rm -f /root/.git-credentials

# PostgreSQL 데이터베이스 초기화
RUN echo -e '# Docker connections:\nhost    all             all             172.0.0.0/8             @authmethodhost@\nhost    replication     all             172.0.0.0/8             @authmethodhost@' >> /usr/pgsql-${PG_MAJOR}/share/pg_hba.conf.sample
RUN su -l postgres -c "/usr/pgsql-${PG_MAJOR}/bin/initdb --pgdata=/var/lib/pgsql/${PG_MAJOR}/data -A scram-sha-256 --auth-local=peer"
COPY --chown=postgres:postgres --chmod=600 files/postgresql.auto.conf /var/lib/pgsql/${PG_MAJOR}/data/postgresql.auto.conf
COPY --chown=root:root --chmod=644 files/role.sql files/extension.sql /
RUN su -l postgres -c "/usr/pgsql-${PG_MAJOR}/bin/postgres --single -D /var/lib/pgsql/${PG_MAJOR}/data" < /role.sql && rm -f /role.sql
RUN su -l postgres -c "/usr/pgsql-${PG_MAJOR}/bin/postgres --single -D /var/lib/pgsql/${PG_MAJOR}/data experdb" < /extension.sql && rm -f /extension.sql
RUN systemctl enable postgresql-${PG_MAJOR}

# 사용자 환경 설정
RUN echo "postgres	ALL=(ALL)	NOPASSWD: ALL" > /etc/sudoers.d/postgres
RUN chmod 440 /etc/sudoers.d/postgres
COPY --chown=postgres:postgres --chmod=644 rocky/files/pgsql_profile /var/lib/pgsql/.bash_profile
ADD --chown=postgres:postgres files/ssh.tar.gz /var/lib/pgsql/.ssh
RUN touch /var/lib/pgsql/.hushlogin && chown -R postgres:postgres /var/lib/pgsql/.hushlogin /var/lib/pgsql/.ssh && chmod 644 /var/lib/pgsql/.hushlogin && chmod 700 /var/lib/pgsql/.ssh
RUN echo -e "\nPATH=/usr/pgsql-${PG_MAJOR}/bin:"'${PATH}' >> /root/.bashrc
COPY --chown=postgres:postgres --chmod=755 files/initialize.sh /var/lib/pgsql
RUN su -l postgres -c "echo '@reboot /var/lib/pgsql/initialize.sh >/tmp/initialize.log 2>&1' | crontab"

# 환경 변수 설정
ENV PATH=/var/lib/pgsql/.local/bin:/usr/pgsql-${PG_MAJOR}/bin:${PATH}
ENV PGDATA=/var/lib/pgsql/${PG_MAJOR}/data PGHOST=localhost PGUSER=experdba PGPASSWORD=experdba PGDATABASE=experdb

# Workspace 설정
ENV GIT_CONFIG_GLOBAL=/var/lib/pgsql/workspace/.gitconfig
ADD  --chown=postgres:postgres files/postgres.tar.gz /var/lib/pgsql
COPY --chown=postgres:postgres --chmod=644 files/pgsql_bashrc /var/lib/pgsql/.bashrc
RUN mkdir /var/lib/pgsql/.vscode-server \
    && mkdir /var/lib/pgsql/valgrind \
    && mkdir /var/lib/pgsql/workspace \
    && mkdir /var/lib/pgsql/workspace/.vscode \
    && mkdir /var/lib/pgsql/workspace/postgres \
    && mkdir /var/lib/pgsql/workspace/pg_store_plans \
    && mkdir /var/lib/pgsql/workspace/pgsentinel \
    && mkdir /var/lib/pgsql/workspace/pg_ensure_queryid
COPY --chown=postgres:postgres --chmod=644 files/psqlrc /var/lib/pgsql/.psqlrc
COPY --chown=postgres:postgres --chmod=644 files/valgrind.supp /var/lib/pgsql/.valgrind.supp
COPY --chown=postgres:postgres --chmod=644 files/problematic.supp /var/lib/pgsql/.problematic.supp
COPY --chown=postgres:postgres --chmod=755 files/cuttail.py files/unique.py /var/lib/pgsql/valgrind/
COPY --chown=postgres:postgres --chmod=644 rocky/files/gitconfig /var/lib/pgsql/workspace/.gitconfig
COPY --chown=postgres:postgres --chmod=644 files/gitignore /var/lib/pgsql/workspace/.gitignore
COPY --chown=postgres:postgres --chmod=644 files/*.json /var/lib/pgsql/workspace/.vscode
COPY --chown=postgres:postgres --chmod=644 rocky/files/${PG_MAJOR}/*.json /var/lib/pgsql/workspace/.vscode
RUN curl -o /var/lib/pgsql/.git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
RUN ( cd /var/lib/pgsql/workspace/.vscode && git init && git add -A && git commit -m "Initial commit" )
RUN ( cd /var/lib/pgsql/workspace/postgres && git init && git remote add origin https://github.com/assam258-5892/postgres.git && git remote add upstream https://github.com/postgres/postgres.git )
RUN ( cd /var/lib/pgsql/workspace/pg_store_plans && git init && git remote add origin https://github.com/experdb/pg_store_plans.git && git remote add upstream https://github.com/ossc-db/pg_store_plans.git )
RUN ( cd /var/lib/pgsql/workspace/pgsentinel && git init && git remote add origin https://github.com/experdb/pgsentinel.git && git remote add upstream https://github.com/pgsentinel/pgsentinel.git )
RUN ( cd /var/lib/pgsql/workspace/pg_ensure_queryid && git init && git remote add origin https://github.com/experdb/pg_ensure_queryid.git )
RUN chown -R postgres:postgres /var/lib/pgsql
RUN tar cvzf /var/lib/pgsql/.git.tar.gz -C /var/lib/pgsql/workspace .gitconfig .gitignore && chown postgres:postgres /var/lib/pgsql/.git.tar.gz
RUN tar cvzf /var/lib/pgsql/.vscode.tar.gz -C /var/lib/pgsql/workspace .vscode && chown postgres:postgres /var/lib/pgsql/.vscode.tar.gz
RUN tar cvzf /var/lib/pgsql/.postgres.tar.gz -C /var/lib/pgsql/workspace postgres && chown postgres:postgres /var/lib/pgsql/.postgres.tar.gz
RUN tar cvzf /var/lib/pgsql/.pg_store_plans.tar.gz -C /var/lib/pgsql/workspace pg_store_plans && chown postgres:postgres /var/lib/pgsql/.pg_store_plans.tar.gz
RUN tar cvzf /var/lib/pgsql/.pgsentinel.tar.gz -C /var/lib/pgsql/workspace pgsentinel && chown postgres:postgres /var/lib/pgsql/.pgsentinel.tar.gz
RUN tar cvzf /var/lib/pgsql/.pg_ensure_queryid.tar.gz -C /var/lib/pgsql/workspace pg_ensure_queryid && chown postgres:postgres /var/lib/pgsql/.pg_ensure_queryid.tar.gz

# Docker 환경 설정
USER root
VOLUME /var/lib/pgsql/workspace
